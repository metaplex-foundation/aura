// This file is @generated by prost-build.
/// The very early grand epoch on a given peer
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BbgmEarlistGrandEpoch {
    #[prost(uint32, optional, tag = "1")]
    pub grand_epoch: ::core::option::Option<u32>,
}
/// List of all grand epochs for a bubblegum tree
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BbgmGrandEpochForTreeList {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<BbgmGrandEpochChecksumForTree>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BbgmGrandEpochChecksumForTree {
    #[prost(uint32, tag = "1")]
    pub grand_epoch: u32,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub checksum: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BbgmGrandEpochList {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<BbgmGrandEpoch>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BbgmGrandEpoch {
    #[prost(uint32, tag = "1")]
    pub grand_epoch: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub tree_pubkey: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub checksum: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BbgmEpochList {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<BbgmEpoch>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BbgmEpoch {
    #[prost(uint32, tag = "1")]
    pub epoch: u32,
    #[prost(bytes = "vec", tag = "2")]
    pub tree_pubkey: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", optional, tag = "3")]
    pub checksum: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BbgmChangeList {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<BbgmChange>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BbgmChange {
    #[prost(bytes = "vec", tag = "1")]
    pub tree_pubkey: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "2")]
    pub slot: u64,
    #[prost(uint64, tag = "3")]
    pub seq: u64,
    #[prost(string, tag = "4")]
    pub signature: ::prost::alloc::string::String,
}
/// Request object for getting grand epoch trees checksums
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBbgmGrandEpochsReq {
    /// Grand epoch number
    #[prost(uint32, tag = "1")]
    pub grand_epoch: u32,
    /// Maximum amount of tree checksums to return
    #[prost(uint64, optional, tag = "2")]
    pub limit: ::core::option::Option<u64>,
    /// Return trees checksums that are after given
    #[prost(bytes = "vec", optional, tag = "3")]
    pub after: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// Request object for getting all grand epoch checksums for a given tree
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBbgmGrandEpochsForTreeReq {
    #[prost(bytes = "vec", tag = "1")]
    pub tree_pubkey: ::prost::alloc::vec::Vec<u8>,
}
/// Request object for getting epoch tree checksums in the geven grand epoch
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBbgmEpochsReq {
    /// Public key of the bubblegum tree, checksum should be returned for
    #[prost(bytes = "vec", tag = "1")]
    pub tree_pubkey: ::prost::alloc::vec::Vec<u8>,
    /// Number of grand epoch which nested epochs should be returned
    #[prost(uint32, tag = "2")]
    pub grand_epoch: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BbgmChangePosition {
    #[prost(uint64, tag = "1")]
    pub slot: u64,
    #[prost(uint64, tag = "2")]
    pub seq: u64,
}
/// Request object for getting list of individual bubblegum tree changes
/// that happened in the given epoch
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBbgmChangesReq {
    /// Pubkey of bubblegum tree
    #[prost(bytes = "vec", tag = "1")]
    pub tree_pubkey: ::prost::alloc::vec::Vec<u8>,
    /// Number of epoch changes are listed from
    #[prost(uint32, tag = "2")]
    pub epoch: u32,
    /// Maximum amount of bubblegum changes to return
    #[prost(uint64, optional, tag = "3")]
    pub limit: ::core::option::Option<u64>,
    /// Return changes after given position
    #[prost(message, optional, tag = "4")]
    pub after: ::core::option::Option<BbgmChangePosition>,
}
/// Represents account NFT grand bucket checksum.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccGrandBucketChecksum {
    #[prost(uint32, tag = "1")]
    pub grand_bucket: u32,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub checksum: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// List of account NFT grand bucket checksums.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccGrandBucketChecksumsList {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<AccGrandBucketChecksum>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccBucketChecksum {
    #[prost(uint32, tag = "1")]
    pub bucket: u32,
    #[prost(bytes = "vec", optional, tag = "2")]
    pub checksum: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccBucketChecksumsList {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<AccBucketChecksum>,
}
/// Represents last tracked account NFT change
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acc {
    #[prost(bytes = "vec", tag = "1")]
    pub account_pubkey: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint64, tag = "2")]
    pub slot: u64,
    #[prost(uint64, tag = "3")]
    pub write_version: u64,
    #[prost(uint64, tag = "4")]
    pub data_hash: u64,
}
/// Represents list of last tracked account NFT changes
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccList {
    #[prost(message, repeated, tag = "1")]
    pub list: ::prost::alloc::vec::Vec<Acc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAccBucketsReq {
    #[prost(uint32, tag = "1")]
    pub grand_bucket: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAccReq {
    /// number of bucket
    #[prost(uint32, tag = "1")]
    pub bucket: u32,
    /// maximum amount of account latest states to return
    #[prost(uint64, optional, tag = "2")]
    pub limit: ::core::option::Option<u64>,
    /// return account that are after the given
    #[prost(bytes = "vec", optional, tag = "3")]
    pub after: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
}
/// Generated client implementations.
pub mod bbgm_consistency_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct BbgmConsistencyServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BbgmConsistencyServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BbgmConsistencyServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BbgmConsistencyServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            BbgmConsistencyServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Returns earliest grand epoch avaible on the peer.
        pub async fn get_bbgm_earliest_grand_epoch(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<tonic::Response<super::BbgmEarlistGrandEpoch>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/consistencyapi.BbgmConsistencyService/GetBbgmEarliestGrandEpoch",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "consistencyapi.BbgmConsistencyService",
                "GetBbgmEarliestGrandEpoch",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_bbgm_grand_epochs_for_tree(
            &mut self,
            request: impl tonic::IntoRequest<super::GetBbgmGrandEpochsForTreeReq>,
        ) -> std::result::Result<tonic::Response<super::BbgmGrandEpochForTreeList>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/consistencyapi.BbgmConsistencyService/GetBbgmGrandEpochsForTree",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "consistencyapi.BbgmConsistencyService",
                "GetBbgmGrandEpochsForTree",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Request list of tree checksums in the given grand epoch
        /// No need to use stream since in the worst case the response size
        /// is still significanly less than 1 MB
        pub async fn get_bbgm_grand_epoch_checksums(
            &mut self,
            request: impl tonic::IntoRequest<super::GetBbgmGrandEpochsReq>,
        ) -> std::result::Result<tonic::Response<super::BbgmGrandEpochList>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/consistencyapi.BbgmConsistencyService/GetBbgmGrandEpochChecksums",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "consistencyapi.BbgmConsistencyService",
                "GetBbgmGrandEpochChecksums",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_bbgm_epoch_checksums_in_grand_epoch(
            &mut self,
            request: impl tonic::IntoRequest<super::GetBbgmEpochsReq>,
        ) -> std::result::Result<tonic::Response<super::BbgmEpochList>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/consistencyapi.BbgmConsistencyService/GetBbgmEpochChecksumsInGrandEpoch",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "consistencyapi.BbgmConsistencyService",
                "GetBbgmEpochChecksumsInGrandEpoch",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_bbgm_changes_in_epoch(
            &mut self,
            request: impl tonic::IntoRequest<super::GetBbgmChangesReq>,
        ) -> std::result::Result<tonic::Response<super::BbgmChangeList>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/consistencyapi.BbgmConsistencyService/GetBbgmChangesInEpoch",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "consistencyapi.BbgmConsistencyService",
                "GetBbgmChangesInEpoch",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Propose bubblegum changes to a peer, that has these changes missing.
        /// Can be called after after the "get changes" API is called, and a portion
        /// of missing bubblegum changes detected on the peer.
        pub async fn propose_missing_bbgm_changes(
            &mut self,
            request: impl tonic::IntoRequest<super::BbgmChangeList>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/consistencyapi.BbgmConsistencyService/ProposeMissingBbgmChanges",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "consistencyapi.BbgmConsistencyService",
                "ProposeMissingBbgmChanges",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod acc_consistency_service_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct AccConsistencyServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AccConsistencyServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AccConsistencyServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AccConsistencyServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + Send + Sync,
        {
            AccConsistencyServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_acc_grand_bucket_checksums(
            &mut self,
            request: impl tonic::IntoRequest<()>,
        ) -> std::result::Result<tonic::Response<super::AccGrandBucketChecksumsList>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/consistencyapi.AccConsistencyService/GetAccGrandBucketChecksums",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "consistencyapi.AccConsistencyService",
                "GetAccGrandBucketChecksums",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_acc_bucket_checksums_in_grand_bucket(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAccBucketsReq>,
        ) -> std::result::Result<tonic::Response<super::AccBucketChecksumsList>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/consistencyapi.AccConsistencyService/GetAccBucketChecksumsInGrandBucket",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "consistencyapi.AccConsistencyService",
                "GetAccBucketChecksumsInGrandBucket",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_accs_in_bucket(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAccReq>,
        ) -> std::result::Result<tonic::Response<super::AccList>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/consistencyapi.AccConsistencyService/GetAccsInBucket",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "consistencyapi.AccConsistencyService",
                "GetAccsInBucket",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn propose_missing_acc_changes(
            &mut self,
            request: impl tonic::IntoRequest<super::AccList>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::new(
                    tonic::Code::Unknown,
                    format!("Service was not ready: {}", e.into()),
                )
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/consistencyapi.AccConsistencyService/ProposeMissingAccChanges",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "consistencyapi.AccConsistencyService",
                "ProposeMissingAccChanges",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod bbgm_consistency_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with BbgmConsistencyServiceServer.
    #[async_trait]
    pub trait BbgmConsistencyService: Send + Sync + 'static {
        /// Returns earliest grand epoch avaible on the peer.
        async fn get_bbgm_earliest_grand_epoch(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<tonic::Response<super::BbgmEarlistGrandEpoch>, tonic::Status>;
        async fn get_bbgm_grand_epochs_for_tree(
            &self,
            request: tonic::Request<super::GetBbgmGrandEpochsForTreeReq>,
        ) -> std::result::Result<tonic::Response<super::BbgmGrandEpochForTreeList>, tonic::Status>;
        /// Request list of tree checksums in the given grand epoch
        /// No need to use stream since in the worst case the response size
        /// is still significanly less than 1 MB
        async fn get_bbgm_grand_epoch_checksums(
            &self,
            request: tonic::Request<super::GetBbgmGrandEpochsReq>,
        ) -> std::result::Result<tonic::Response<super::BbgmGrandEpochList>, tonic::Status>;
        async fn get_bbgm_epoch_checksums_in_grand_epoch(
            &self,
            request: tonic::Request<super::GetBbgmEpochsReq>,
        ) -> std::result::Result<tonic::Response<super::BbgmEpochList>, tonic::Status>;
        async fn get_bbgm_changes_in_epoch(
            &self,
            request: tonic::Request<super::GetBbgmChangesReq>,
        ) -> std::result::Result<tonic::Response<super::BbgmChangeList>, tonic::Status>;
        /// Propose bubblegum changes to a peer, that has these changes missing.
        /// Can be called after after the "get changes" API is called, and a portion
        /// of missing bubblegum changes detected on the peer.
        async fn propose_missing_bbgm_changes(
            &self,
            request: tonic::Request<super::BbgmChangeList>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct BbgmConsistencyServiceServer<T: BbgmConsistencyService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: BbgmConsistencyService> BbgmConsistencyServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for BbgmConsistencyServiceServer<T>
    where
        T: BbgmConsistencyService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/consistencyapi.BbgmConsistencyService/GetBbgmEarliestGrandEpoch" => {
                    #[allow(non_camel_case_types)]
                    struct GetBbgmEarliestGrandEpochSvc<T: BbgmConsistencyService>(pub Arc<T>);
                    impl<T: BbgmConsistencyService> tonic::server::UnaryService<()>
                        for GetBbgmEarliestGrandEpochSvc<T>
                    {
                        type Response = super::BbgmEarlistGrandEpoch;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BbgmConsistencyService>::get_bbgm_earliest_grand_epoch(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetBbgmEarliestGrandEpochSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/consistencyapi.BbgmConsistencyService/GetBbgmGrandEpochsForTree" => {
                    #[allow(non_camel_case_types)]
                    struct GetBbgmGrandEpochsForTreeSvc<T: BbgmConsistencyService>(pub Arc<T>);
                    impl<T: BbgmConsistencyService>
                        tonic::server::UnaryService<super::GetBbgmGrandEpochsForTreeReq>
                        for GetBbgmGrandEpochsForTreeSvc<T>
                    {
                        type Response = super::BbgmGrandEpochForTreeList;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetBbgmGrandEpochsForTreeReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BbgmConsistencyService>::get_bbgm_grand_epochs_for_tree(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetBbgmGrandEpochsForTreeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/consistencyapi.BbgmConsistencyService/GetBbgmGrandEpochChecksums" => {
                    #[allow(non_camel_case_types)]
                    struct GetBbgmGrandEpochChecksumsSvc<T: BbgmConsistencyService>(pub Arc<T>);
                    impl<T: BbgmConsistencyService>
                        tonic::server::UnaryService<super::GetBbgmGrandEpochsReq>
                        for GetBbgmGrandEpochChecksumsSvc<T>
                    {
                        type Response = super::BbgmGrandEpochList;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetBbgmGrandEpochsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BbgmConsistencyService>::get_bbgm_grand_epoch_checksums(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetBbgmGrandEpochChecksumsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/consistencyapi.BbgmConsistencyService/GetBbgmEpochChecksumsInGrandEpoch" => {
                    #[allow(non_camel_case_types)]
                    struct GetBbgmEpochChecksumsInGrandEpochSvc<T: BbgmConsistencyService>(
                        pub Arc<T>,
                    );
                    impl<T: BbgmConsistencyService>
                        tonic::server::UnaryService<super::GetBbgmEpochsReq>
                        for GetBbgmEpochChecksumsInGrandEpochSvc<T>
                    {
                        type Response = super::BbgmEpochList;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetBbgmEpochsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BbgmConsistencyService>::get_bbgm_epoch_checksums_in_grand_epoch(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetBbgmEpochChecksumsInGrandEpochSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/consistencyapi.BbgmConsistencyService/GetBbgmChangesInEpoch" => {
                    #[allow(non_camel_case_types)]
                    struct GetBbgmChangesInEpochSvc<T: BbgmConsistencyService>(pub Arc<T>);
                    impl<T: BbgmConsistencyService>
                        tonic::server::UnaryService<super::GetBbgmChangesReq>
                        for GetBbgmChangesInEpochSvc<T>
                    {
                        type Response = super::BbgmChangeList;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetBbgmChangesReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BbgmConsistencyService>::get_bbgm_changes_in_epoch(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetBbgmChangesInEpochSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/consistencyapi.BbgmConsistencyService/ProposeMissingBbgmChanges" => {
                    #[allow(non_camel_case_types)]
                    struct ProposeMissingBbgmChangesSvc<T: BbgmConsistencyService>(pub Arc<T>);
                    impl<T: BbgmConsistencyService>
                        tonic::server::UnaryService<super::BbgmChangeList>
                        for ProposeMissingBbgmChangesSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::BbgmChangeList>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as BbgmConsistencyService>::propose_missing_bbgm_changes(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ProposeMissingBbgmChangesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    Ok(http::Response::builder()
                        .status(200)
                        .header("grpc-status", "12")
                        .header("content-type", "application/grpc")
                        .body(empty_body())
                        .unwrap())
                }),
            }
        }
    }
    impl<T: BbgmConsistencyService> Clone for BbgmConsistencyServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: BbgmConsistencyService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: BbgmConsistencyService> tonic::server::NamedService for BbgmConsistencyServiceServer<T> {
        const NAME: &'static str = "consistencyapi.BbgmConsistencyService";
    }
}
/// Generated server implementations.
pub mod acc_consistency_service_server {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AccConsistencyServiceServer.
    #[async_trait]
    pub trait AccConsistencyService: Send + Sync + 'static {
        async fn get_acc_grand_bucket_checksums(
            &self,
            request: tonic::Request<()>,
        ) -> std::result::Result<tonic::Response<super::AccGrandBucketChecksumsList>, tonic::Status>;
        async fn get_acc_bucket_checksums_in_grand_bucket(
            &self,
            request: tonic::Request<super::GetAccBucketsReq>,
        ) -> std::result::Result<tonic::Response<super::AccBucketChecksumsList>, tonic::Status>;
        async fn get_accs_in_bucket(
            &self,
            request: tonic::Request<super::GetAccReq>,
        ) -> std::result::Result<tonic::Response<super::AccList>, tonic::Status>;
        async fn propose_missing_acc_changes(
            &self,
            request: tonic::Request<super::AccList>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct AccConsistencyServiceServer<T: AccConsistencyService> {
        inner: _Inner<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    struct _Inner<T>(Arc<T>);
    impl<T: AccConsistencyService> AccConsistencyServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            let inner = _Inner(inner);
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for AccConsistencyServiceServer<T>
    where
        T: AccConsistencyService,
        B: Body + Send + 'static,
        B::Error: Into<StdError> + Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            let inner = self.inner.clone();
            match req.uri().path() {
                "/consistencyapi.AccConsistencyService/GetAccGrandBucketChecksums" => {
                    #[allow(non_camel_case_types)]
                    struct GetAccGrandBucketChecksumsSvc<T: AccConsistencyService>(pub Arc<T>);
                    impl<T: AccConsistencyService> tonic::server::UnaryService<()>
                        for GetAccGrandBucketChecksumsSvc<T>
                    {
                        type Response = super::AccGrandBucketChecksumsList;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(&mut self, request: tonic::Request<()>) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AccConsistencyService>::get_acc_grand_bucket_checksums(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetAccGrandBucketChecksumsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/consistencyapi.AccConsistencyService/GetAccBucketChecksumsInGrandBucket" => {
                    #[allow(non_camel_case_types)]
                    struct GetAccBucketChecksumsInGrandBucketSvc<T: AccConsistencyService>(
                        pub Arc<T>,
                    );
                    impl<T: AccConsistencyService>
                        tonic::server::UnaryService<super::GetAccBucketsReq>
                        for GetAccBucketChecksumsInGrandBucketSvc<T>
                    {
                        type Response = super::AccBucketChecksumsList;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAccBucketsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AccConsistencyService>::get_acc_bucket_checksums_in_grand_bucket(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetAccBucketChecksumsInGrandBucketSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/consistencyapi.AccConsistencyService/GetAccsInBucket" => {
                    #[allow(non_camel_case_types)]
                    struct GetAccsInBucketSvc<T: AccConsistencyService>(pub Arc<T>);
                    impl<T: AccConsistencyService> tonic::server::UnaryService<super::GetAccReq>
                        for GetAccsInBucketSvc<T>
                    {
                        type Response = super::AccList;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAccReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AccConsistencyService>::get_accs_in_bucket(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = GetAccsInBucketSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/consistencyapi.AccConsistencyService/ProposeMissingAccChanges" => {
                    #[allow(non_camel_case_types)]
                    struct ProposeMissingAccChangesSvc<T: AccConsistencyService>(pub Arc<T>);
                    impl<T: AccConsistencyService> tonic::server::UnaryService<super::AccList>
                        for ProposeMissingAccChangesSvc<T>
                    {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AccList>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AccConsistencyService>::propose_missing_acc_changes(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let inner = inner.0;
                        let method = ProposeMissingAccChangesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    Ok(http::Response::builder()
                        .status(200)
                        .header("grpc-status", "12")
                        .header("content-type", "application/grpc")
                        .body(empty_body())
                        .unwrap())
                }),
            }
        }
    }
    impl<T: AccConsistencyService> Clone for AccConsistencyServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    impl<T: AccConsistencyService> Clone for _Inner<T> {
        fn clone(&self) -> Self {
            Self(Arc::clone(&self.0))
        }
    }
    impl<T: std::fmt::Debug> std::fmt::Debug for _Inner<T> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            write!(f, "{:?}", self.0)
        }
    }
    impl<T: AccConsistencyService> tonic::server::NamedService for AccConsistencyServiceServer<T> {
        const NAME: &'static str = "consistencyapi.AccConsistencyService";
    }
}
