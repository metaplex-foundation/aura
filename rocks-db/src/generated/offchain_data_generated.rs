// automatically generated by the FlatBuffers compiler, do not modify

// @generated

use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod off_chain_data {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_STORAGE_MUTABILITY: i8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_STORAGE_MUTABILITY: i8 = 1;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_STORAGE_MUTABILITY: [StorageMutability; 2] =
        [StorageMutability::Immutable, StorageMutability::Mutable];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct StorageMutability(pub i8);
    #[allow(non_upper_case_globals)]
    impl StorageMutability {
        pub const Immutable: Self = Self(0);
        pub const Mutable: Self = Self(1);

        pub const ENUM_MIN: i8 = 0;
        pub const ENUM_MAX: i8 = 1;
        pub const ENUM_VALUES: &'static [Self] = &[Self::Immutable, Self::Mutable];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::Immutable => Some("Immutable"),
                Self::Mutable => Some("Mutable"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for StorageMutability {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for StorageMutability {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for StorageMutability {
        type Output = StorageMutability;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<i8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for StorageMutability {
        type Scalar = i8;
        #[inline]
        fn to_little_endian(self) -> i8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: i8) -> Self {
            let b = i8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for StorageMutability {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            i8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for StorageMutability {}
    pub enum OffChainDataOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct OffChainData<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for OffChainData<'a> {
        type Inner = OffChainData<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> OffChainData<'a> {
        pub const VT_STORAGE_MUTABILITY: flatbuffers::VOffsetT = 4;
        pub const VT_URL: flatbuffers::VOffsetT = 6;
        pub const VT_METADATA: flatbuffers::VOffsetT = 8;
        pub const VT_LAST_READ_AT: flatbuffers::VOffsetT = 10;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            OffChainData { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<
            'bldr: 'args,
            'args: 'mut_bldr,
            'mut_bldr,
            A: flatbuffers::Allocator + 'bldr,
        >(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args OffChainDataArgs<'args>,
        ) -> flatbuffers::WIPOffset<OffChainData<'bldr>> {
            let mut builder = OffChainDataBuilder::new(_fbb);
            builder.add_last_read_at(args.last_read_at);
            if let Some(x) = args.metadata {
                builder.add_metadata(x);
            }
            if let Some(x) = args.url {
                builder.add_url(x);
            }
            builder.add_storage_mutability(args.storage_mutability);
            builder.finish()
        }

        #[inline]
        pub fn storage_mutability(&self) -> StorageMutability {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<StorageMutability>(
                        OffChainData::VT_STORAGE_MUTABILITY,
                        Some(StorageMutability::Immutable),
                    )
                    .unwrap()
            }
        }
        #[inline]
        pub fn url(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(OffChainData::VT_URL, None)
            }
        }
        #[inline]
        pub fn metadata(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(OffChainData::VT_METADATA, None)
            }
        }
        #[inline]
        pub fn last_read_at(&self) -> i64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<i64>(OffChainData::VT_LAST_READ_AT, Some(0))
                    .unwrap()
            }
        }
    }

    impl flatbuffers::Verifiable for OffChainData<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<StorageMutability>(
                    "storage_mutability",
                    Self::VT_STORAGE_MUTABILITY,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("url", Self::VT_URL, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "metadata",
                    Self::VT_METADATA,
                    false,
                )?
                .visit_field::<i64>("last_read_at", Self::VT_LAST_READ_AT, false)?
                .finish();
            Ok(())
        }
    }
    pub struct OffChainDataArgs<'a> {
        pub storage_mutability: StorageMutability,
        pub url: Option<flatbuffers::WIPOffset<&'a str>>,
        pub metadata: Option<flatbuffers::WIPOffset<&'a str>>,
        pub last_read_at: i64,
    }
    impl<'a> Default for OffChainDataArgs<'a> {
        #[inline]
        fn default() -> Self {
            OffChainDataArgs {
                storage_mutability: StorageMutability::Immutable,
                url: None,
                metadata: None,
                last_read_at: 0,
            }
        }
    }

    pub struct OffChainDataBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OffChainDataBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_storage_mutability(&mut self, storage_mutability: StorageMutability) {
            self.fbb_.push_slot::<StorageMutability>(
                OffChainData::VT_STORAGE_MUTABILITY,
                storage_mutability,
                StorageMutability::Immutable,
            );
        }
        #[inline]
        pub fn add_url(&mut self, url: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(OffChainData::VT_URL, url);
        }
        #[inline]
        pub fn add_metadata(&mut self, metadata: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(OffChainData::VT_METADATA, metadata);
        }
        #[inline]
        pub fn add_last_read_at(&mut self, last_read_at: i64) {
            self.fbb_
                .push_slot::<i64>(OffChainData::VT_LAST_READ_AT, last_read_at, 0);
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        ) -> OffChainDataBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            OffChainDataBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<OffChainData<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for OffChainData<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("OffChainData");
            ds.field("storage_mutability", &self.storage_mutability());
            ds.field("url", &self.url());
            ds.field("metadata", &self.metadata());
            ds.field("last_read_at", &self.last_read_at());
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `OffChainData`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_off_chain_data_unchecked`.
    pub fn root_as_off_chain_data(
        buf: &[u8],
    ) -> Result<OffChainData, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<OffChainData>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `OffChainData` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_off_chain_data_unchecked`.
    pub fn size_prefixed_root_as_off_chain_data(
        buf: &[u8],
    ) -> Result<OffChainData, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<OffChainData>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `OffChainData` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_off_chain_data_unchecked`.
    pub fn root_as_off_chain_data_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<OffChainData<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<OffChainData<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `OffChainData` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_off_chain_data_unchecked`.
    pub fn size_prefixed_root_as_off_chain_data_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<OffChainData<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<OffChainData<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a OffChainData and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `OffChainData`.
    pub unsafe fn root_as_off_chain_data_unchecked(buf: &[u8]) -> OffChainData {
        flatbuffers::root_unchecked::<OffChainData>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed OffChainData and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `OffChainData`.
    pub unsafe fn size_prefixed_root_as_off_chain_data_unchecked(buf: &[u8]) -> OffChainData {
        flatbuffers::size_prefixed_root_unchecked::<OffChainData>(buf)
    }
    #[inline]
    pub fn finish_off_chain_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<OffChainData<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_off_chain_data_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<OffChainData<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod OffChainData
