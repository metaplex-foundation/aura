//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use super::sea_orm_active_enums::OwnerType;
use super::sea_orm_active_enums::RoyaltyTargetType;
use super::sea_orm_active_enums::SpecificationAssetClass;
use super::sea_orm_active_enums::SpecificationVersions;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug)]
pub struct Entity;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Model {
    pub id: Vec<u8>,
    pub alt_id: Option<Vec<u8>>,
    pub specification_version: Option<SpecificationVersions>,
    pub specification_asset_class: Option<SpecificationAssetClass>,
    pub owner: Option<Vec<u8>>,
    pub owner_type: OwnerType,
    pub delegate: Option<Vec<u8>>,
    pub frozen: bool,
    pub supply: i64,
    pub supply_mint: Option<Vec<u8>>,
    pub compressed: bool,
    pub compressible: bool,
    pub seq: Option<i64>,
    pub tree_id: Option<Vec<u8>>,
    pub leaf: Option<Vec<u8>>,
    pub nonce: Option<i64>,
    pub royalty_target_type: RoyaltyTargetType,
    pub royalty_target: Option<Vec<u8>>,
    pub royalty_amount: i32,
    pub asset_data: Option<Vec<u8>>,
    pub created_at: Option<i64>,
    pub burnt: bool,
    pub slot_updated: Option<i64>,
    pub data_hash: Option<String>,
    pub creator_hash: Option<String>,
    pub owner_delegate_seq: Option<i64>,
    pub was_decompressed: bool,
    pub leaf_seq: Option<i64>,
    pub plugins: Option<serde_json::Value>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    AltId,
    SpecificationVersion,
    SpecificationAssetClass,
    Owner,
    OwnerType,
    Delegate,
    Frozen,
    Supply,
    SupplyMint,
    Compressed,
    Compressible,
    Seq,
    TreeId,
    Leaf,
    Nonce,
    RoyaltyTargetType,
    RoyaltyTarget,
    RoyaltyAmount,
    AssetData,
    CreatedAt,
    Burnt,
    SlotUpdated,
    DataHash,
    CreatorHash,
    OwnerDelegateSeq,
    WasDecompressed,
    LeafSeq,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    AssetData,
    AssetV1AccountAttachments,
    AssetCreators,
    AssetAuthority,
    AssetGrouping,
}
