//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use super::sea_orm_active_enums::TaskStatus;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "tasks"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: String,
    pub task_type: String,
    pub data: Json,
    pub status: TaskStatus,
    pub created_at: DateTime,
    pub locked_until: Option<DateTime>,
    pub locked_by: Option<String>,
    pub max_attempts: i16,
    pub attempts: i16,
    pub duration: Option<i32>,
    pub errors: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    TaskType,
    Data,
    Status,
    CreatedAt,
    LockedUntil,
    LockedBy,
    MaxAttempts,
    Attempts,
    Duration,
    Errors,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(None).def(),
            Self::TaskType => ColumnType::String(None).def(),
            Self::Data => ColumnType::JsonBinary.def(),
            Self::Status => TaskStatus::db_type(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::LockedUntil => ColumnType::DateTime.def().null(),
            Self::LockedBy => ColumnType::String(None).def().null(),
            Self::MaxAttempts => ColumnType::SmallInteger.def(),
            Self::Attempts => ColumnType::SmallInteger.def(),
            Self::Duration => ColumnType::Integer.def().null(),
            Self::Errors => ColumnType::Text.def().null(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
