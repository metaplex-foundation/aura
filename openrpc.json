{
  "openrpc": "1.0.0-rc1",
  "info": {
    "version": "0.0.1",
    "title": "Digital Asset API"
  },
  "servers": [
    {
      "url": "https://aura-mainnet.metaplex.com"
    }
  ],
  "methods": [
    {
      "name": "getAssetProof",
      "summary": "Get a merkle proof for a compressed asset by its public key.",
      "description": "This method is crucial for transactions with compressed assets. For example, to successfully transfer a compressed assets, you must provide the proof and tree.",
      "tags": [
        {
          "name": "proof"
        },
        {
          "name": "single"
        }
      ],
      "params": [
        {
          "$ref": "#/components/contentDescriptors/GetAssetProof"
        }
      ],
      "examples": [],
      "result": {
        "$ref": "#/components/contentDescriptors/assetProof"
      },
      "errors": [
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Proof Not Found"
        },
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        }
      ]
    },
    {
      "name": "getAssetProofBatch",
      "summary": "Get merkle proofs for compressed assets by its public keys",
      "description": "This method is crucial for transactions with compressed assets. For example, to successfully transfer a compressed assets, you must provide the proof and tree.",
      "tags": [
        {
          "name": "proof"
        },
        {
          "name": "batch"
        }
      ],
      "params": [
        {
          "$ref": "#/components/contentDescriptors/GetAssetProofBatch"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/assetProofBatch"
      },
      "errors": [
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Proof Not Found"
        },
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        }
      ]
    },
    {
      "name": "getAsset",
      "summary": "Get an asset by its public key.",
      "description": "This method will retrieve all necessary details for a specified standard or compressed asset.",
      "tags": [
        {
          "name": "asset"
        },
        {
          "name": "single"
        }
      ],
      "params": [
        {
          "$ref": "#/components/contentDescriptors/AssetId"
        },
        {
          "$ref": "#/components/schemas/options"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/Asset"
      },
      "errors": [
        {
          "code": -32000,
          "message": "Pubkey Validation Error"
        },
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        },
        {
          "code": -32000,
          "message": "Pagination Error. Only one pagination parameter supported per query"
        },
        {
          "code": -32000,
          "message": "Pagination Error. No Pagination Method Selected"
        },
        {
          "code": -32000,
          "message": "Need to specify `ownerAddress` when using `showNativeBalance`"
        },
        {
          "code": -32000,
          "message": "Validation Error"
        },
        {
          "code": -32603,
          "message": "Internal error"
        }
      ]
    },
    {
      "name": "getAssetBatch",
      "summary": "Get multiple assets by their public keys.",
      "description": "This method will retrieve all necessary details for a specified standard or compressed assets.",
      "tags": [
        {
          "name": "asset"
        },
        {
          "name": "batch"
        }
      ],
      "params": [
        {
          "$ref": "#/components/contentDescriptors/AssetIds"
        },
        {
          "$ref": "#/components/schemas/options"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/AssetList"
      },
      "errors": [
        {
          "code": -32000,
          "message": "Pubkey Validation Error"
        },
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        },
        {
          "code": -32000,
          "message": "Pagination Error. Only one pagination parameter supported per query"
        },
        {
          "code": -32000,
          "message": "Pagination Error. No Pagination Method Selected"
        },
        {
          "code": -32000,
          "message": "Need to specify `ownerAddress` when using `showNativeBalance`"
        },
        {
          "code": -32000,
          "message": "Validation Error"
        },
        {
          "code": -32603,
          "message": "Internal error"
        }
      ]
    },
    {
      "name": "getAssetsByOwner",
      "summary": "Retrieve a list of all assets owned by the specified public key.",
      "description": "This will return a list of assets for the specified owner.",
      "tags": [
        {
          "name": "batch"
        },
        {
          "name": "owner"
        }
      ],
      "params": [
        {
          "name": "owner_address",
          "description": "The owner address key.",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/schemas/asset_sort_by"
        },
        {
          "$ref": "#/components/schemas/limit"
        },
        {
          "$ref": "#/components/schemas/page"
        },
        {
          "$ref": "#/components/schemas/before"
        },
        {
          "$ref": "#/components/schemas/after"
        },
        {
          "$ref": "#/components/schemas/cursor"
        },
        {
          "$ref": "#/components/schemas/get_by_methods_options"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/AssetList"
      },
      "errors": [
        {
          "code": -32000,
          "message": "Pubkey Validation Error"
        },
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        },
        {
          "code": -32000,
          "message": "Pagination Error. Only one pagination parameter supported per query"
        },
        {
          "code": -32000,
          "message": "Pagination Error. No Pagination Method Selected"
        },
        {
          "code": -32000,
          "message": "Need to specify `ownerAddress` when using `showNativeBalance`"
        },
        {
          "code": -32000,
          "message": "Validation Error"
        },
        {
          "code": -32603,
          "message": "Internal error"
        }
      ]
    },
    {
      "name": "getAssetsByGroup",
      "summary": "Get a list of assets by a group key and value.",
      "description": "This will return asset details for a specified group (e.g., a collection) and can include both compressed and standard assets.",
      "tags": [
        {
          "name": "group"
        },
        {
          "name": "asset"
        },
        {
          "name": "batch"
        }
      ],
      "params": [
        {
          "name": "group_key",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "group_value",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/schemas/asset_sort_by"
        },
        {
          "$ref": "#/components/schemas/limit"
        },
        {
          "$ref": "#/components/schemas/page"
        },
        {
          "$ref": "#/components/schemas/before"
        },
        {
          "$ref": "#/components/schemas/after"
        },
        {
          "$ref": "#/components/schemas/cursor"
        },
        {
          "$ref": "#/components/schemas/get_by_methods_options"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/AssetList"
      },
      "errors": [
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        },
        {
          "code": -32000,
          "message": "Pagination Error. Only one pagination parameter supported per query"
        },
        {
          "code": -32000,
          "message": "Pagination Error. No Pagination Method Selected"
        },
        {
          "code": -32000,
          "message": "Need to specify `ownerAddress` when using `showNativeBalance`"
        },
        {
          "code": -32000,
          "message": "Validation Error"
        },
        {
          "code": -32603,
          "message": "Internal error"
        }
      ]
    },
    {
      "name": "getAssetsByCreator",
      "summary": "Get a list of assets created by an address.",
      "description": "This will return a list of assets associated with the specified creator, including both compressed and standard assets.",
      "tags": [
        {
          "name": "batch"
        },
        {
          "name": "creator"
        },
        {
          "name": "asset"
        }
      ],
      "params": [
        {
          "name": "creator_address",
          "description": "Public key of creator",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/schemas/asset_sort_by"
        },
        {
          "$ref": "#/components/schemas/limit"
        },
        {
          "$ref": "#/components/schemas/page"
        },
        {
          "$ref": "#/components/schemas/before"
        },
        {
          "$ref": "#/components/schemas/after"
        },
        {
          "$ref": "#/components/schemas/cursor"
        },
        {
          "$ref": "#/components/schemas/get_by_methods_options"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/AssetList"
      },
      "errors": [
        {
          "code": -32000,
          "message": "Pubkey Validation Error"
        },
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        },
        {
          "code": -32000,
          "message": "Pagination Error. Only one pagination parameter supported per query"
        },
        {
          "code": -32000,
          "message": "Pagination Error. No Pagination Method Selected"
        },
        {
          "code": -32000,
          "message": "Need to specify `ownerAddress` when using `showNativeBalance`"
        },
        {
          "code": -32000,
          "message": "Validation Error"
        },
        {
          "code": -32603,
          "message": "Internal error"
        }
      ]
    },
    {
      "name": "searchAssets",
      "summary": "Search for assets using a variety of parameters.",
      "description": "This method will return assets based on the specified custom search criteria.",
      "tags": [
        {
          "name": "search"
        },
        {
          "name": "asset"
        }
      ],
      "params": [
        {
          "name": "negate",
          "description": "Optional flag to negate the search criteria.",
          "schema": { "type": "boolean" }
        },
        {
          "name": "conditionType",
          "description": "The type of search condition to apply.",
          "schema": { "$ref": "#/components/schemas/SearchConditionType" }
        },
        {
          "name": "interface",
          "description": "The interface type to filter the assets.",
          "schema": { "$ref": "#/components/schemas/Interface" }
        },
        {
          "name": "ownerAddress",
          "description": "The owner's public key address.",
          "schema": { "type": "string" }
        },
        {
          "name": "ownerType",
          "description": "The ownership model used for the asset.",
          "schema": { "$ref": "#/components/schemas/OwnershipModel" }
        },
        {
          "name": "creatorAddress",
          "description": "The public key of the asset's creator.",
          "schema": { "type": "string" }
        },
        {
          "name": "creatorVerified",
          "description": "Flag indicating if the creator is verified.",
          "schema": { "type": "boolean" }
        },
        {
          "name": "authorityAddress",
          "description": "The authority's public key address.",
          "schema": { "type": "string" }
        },
        {
          "name": "grouping",
          "description": "Group key-value pair to filter assets by a specific collection or group.",
          "schema": {
            "type": "array",
            "items": [
              { "type": "string" },
              { "type": "string" }
            ]
          }
        },
        {
          "name": "delegate",
          "description": "The public key of the delegate for the asset.",
          "schema": { "type": "string" }
        },
        {
          "name": "frozen",
          "description": "Flag indicating if the asset is frozen.",
          "schema": { "type": "boolean" }
        },
        {
          "name": "supply",
          "description": "The supply of the asset.",
          "schema": { "type": "integer", "format": "uint64" }
        },
        {
          "name": "supplyMint",
          "description": "The public key of the mint for the asset supply.",
          "schema": { "type": "string" }
        },
        {
          "name": "compressed",
          "description": "Flag indicating if the asset is compressed.",
          "schema": { "type": "boolean" }
        },
        {
          "name": "compressible",
          "description": "Flag indicating if the asset can be compressed.",
          "schema": { "type": "boolean" }
        },
        {
          "name": "royaltyTargetType",
          "description": "The royalty model associated with the asset.",
          "schema": { "$ref": "#/components/schemas/RoyaltyModel" }
        },
        {
          "name": "royaltyTarget",
          "description": "The target address for royalty payments.",
          "schema": { "type": "string" }
        },
        {
          "name": "royaltyAmount",
          "description": "The amount of royalties associated with the asset.",
          "schema": { "type": "integer", "format": "uint32" }
        },
        {
          "name": "tokenType",
          "description": "The type of token.",
          "schema": { "$ref": "#/components/schemas/TokenType" }
        },
        {
          "name": "burnt",
          "description": "Flag indicating if the asset has been burnt.",
          "schema": { "type": "boolean" }
        },
        {
          "name": "jsonUri",
          "description": "The URI for additional JSON metadata.",
          "schema": { "type": "string" }
        },
        {
          "name": "name",
          "description": "The name of the asset.",
          "schema": { "type": "string" }
        },
        {
          "$ref": "#/components/schemas/asset_sort_by"
        },
        {
          "$ref": "#/components/schemas/limit"
        },
        {
          "$ref": "#/components/schemas/page"
        },
        {
          "$ref": "#/components/schemas/before"
        },
        {
          "$ref": "#/components/schemas/after"
        },
        {
          "$ref": "#/components/schemas/search_assets_options"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/AssetList"
      },
      "errors": [
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        },
        {
          "code": -32000,
          "message": "Pagination Error. Only one pagination parameter supported per query"
        },
        {
          "code": -32000,
          "message": "Pagination Error. No Pagination Method Selected"
        },
        {
          "code": -32000,
          "message": "Need to specify `ownerAddress` when using `showNativeBalance`"
        },
        {
          "code": -32000,
          "message": "Validation Error"
        },
        {
          "code": -32603,
          "message": "Internal error"
        }
      ]
    },
    {
      "name": "getAssetsByAuthority",
      "summary": "Get a list of assets with a specific authority.",
      "description": "This will return a list of assets for the given authority provided.",
      "tags": [
        {
          "name": "asset"
        },
        {
          "name": "batch"
        },
        {
          "name": "authority"
        }
      ],
      "params": [
        {
          "name": "creator_address",
          "description": "Public key of creator",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/schemas/asset_sort_by"
        },
        {
          "$ref": "#/components/schemas/limit"
        },
        {
          "$ref": "#/components/schemas/page"
        },
        {
          "$ref": "#/components/schemas/before"
        },
        {
          "$ref": "#/components/schemas/after"
        },
        {
          "$ref": "#/components/schemas/cursor"
        },
        {
          "$ref": "#/components/schemas/get_by_methods_options"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/AssetList"
      },
      "errors": [
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        },
        {
          "code": -32000,
          "message": "Pagination Error. Only one pagination parameter supported per query"
        },
        {
          "code": -32000,
          "message": "Pagination Error. No Pagination Method Selected"
        },
        {
          "code": -32000,
          "message": "Need to specify `ownerAddress` when using `showNativeBalance`"
        },
        {
          "code": -32000,
          "message": "Validation Error"
        },
        {
          "code": -32603,
          "message": "Internal error"
        }
      ]
    },
    {
      "name": "getTokenAccounts",
      "summary": "Retrieve information about all token accounts for a given mint or a specific owner.",
      "description": "Retrieve all token accounts linked to a specific mint or owner account. This provides an efficient way to gather all owners of an SPL token or all tokens held by a particular address.",
      "tags": [
        {
          "name": "single"
        },
        {
          "name": "token"
        },
        {
          "name": "accounts"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/limit"
        },
        {
          "$ref": "#/components/schemas/page"
        },
        {
          "name": "owner",
          "description": "Public key of asset",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "mint",
          "description": "Public key of mint",
          "schema": {
            "type": "string"
          }
        },
        {
          "$ref": "#/components/schemas/display_options"
        },
        {
          "$ref": "#/components/schemas/before"
        },
        {
          "$ref": "#/components/schemas/after"
        },
        {
          "$ref": "#/components/schemas/cursor"
        }
      ],
      "result": {
        "name": "tokenAccountsList",
        "description": "Список аккаунтов токенов и информация о пагинации",
        "schema": {
          "$ref": "#/components/schemas/TokenAccountsList"
        }
      },
      "errors": [
        {
          "code": -32000,
          "message": "Pubkey Validation Error"
        },
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        },
        {
          "code": -32000,
          "message": "Pagination Error. Only one pagination parameter supported per query"
        },
        {
          "code": -32000,
          "message": "Pagination Error. No Pagination Method Selected"
        },
        {
          "code": -32000,
          "message": "Need to specify `ownerAddress` when using `showNativeBalance`"
        },
        {
          "code": -32000,
          "message": "Validation Error"
        },
        {
          "code": -32603,
          "message": "Internal error"
        }
      ]
    },
    {
      "name": "getCoreFees",
      "summary": "Get core fees",
      "tags": [
        {
          "name": "fee"
        }
      ],
      "params": [
        {
          "$ref": "#/components/schemas/limit"
        },
        {
          "$ref": "#/components/schemas/page"
        },
        {
          "$ref": "#/components/schemas/before"
        },
        {
          "$ref": "#/components/schemas/after"
        },
        {
          "$ref": "#/components/schemas/cursor"
        }
      ],
      "result": {
        "name": "CoreFeesAccountsList",
        "schema": {
          "$ref": "#/components/schemas/CoreFeesAccountsList"
        }
      },
      "errors": [
        {
          "code": -32000,
          "message": "Pubkey Validation Error"
        },
        {
          "code": -32000,
          "message": "Database Error: RecordNotFound Error: Asset Not Found"
        },
        {
          "code": -32000,
          "message": "Pagination Error. Only one pagination parameter supported per query"
        },
        {
          "code": -32000,
          "message": "Pagination Error. No Pagination Method Selected"
        },
        {
          "code": -32000,
          "message": "Need to specify `ownerAddress` when using `showNativeBalance`"
        },
        {
          "code": -32000,
          "message": "Validation Error"
        },
        {
          "code": -32603,
          "message": "Internal error"
        }
      ]
    },
    {
      "name": "getAssetSignaturesV2",
      "summary": "Get a list of transaction signatures related to a compressed asset.",
      "description": "This method will return the transaction signatures for a given asset.",
      "tags": [
        {
          "name": "signature"
        },
        {
          "name": "single"
        }
      ],
      "params": [
        {
          "name": "id",
          "schema": {
            "type": "string",
            "description": "The public key of the asset to retrieve the signatures for",
            "nullable": true
          }
        },
        {
          "$ref": "#/components/schemas/limit"
        },
        {
          "$ref": "#/components/schemas/page"
        },
        {
          "$ref": "#/components/schemas/before"
        },
        {
          "$ref": "#/components/schemas/after"
        },
        {
          "name": "tree",
          "schema": {
            "type": "string",
            "description": "Optional tree name for signature filtering.",
            "nullable": true
          }
        },
        {
          "name": "leaf_index",
          "schema": {
            "type": "integer",
            "nullable": true
          }
        },
        {
          "name": "sortDirection",
          "schema": {
            "type": "string",
            "description": "Optional sorting direction for signatures.",
            "nullable": true,
            "enum": [
              "asc",
              "desc"
            ],
            "example": "asc"
          }
        },
        {
          "$ref": "#/components/schemas/cursor"
        }
      ],
      "result": {
        "name": "TransactionSignatureList",
        "schema": {
          "$ref": "#/components/schemas/TransactionSignatureList"
        }
      }
    }
  ],
  "components": {
    "contentDescriptors": {
      "Asset": {
        "name": "Asset",
        "description": "DAS API Asset",
        "schema": {
          "$ref": "#/components/schemas/Asset"
        }
      },
      "AssetList": {
        "name": "AssetList",
        "description": "An array of assets",
        "schema": {
          "$ref": "#/components/schemas/AssetList"
        }
      },
      "assetProof": {
        "name": "AssetProof",
        "schema": {
          "$ref": "#/components/schemas/AssetProof"
        }
      },
      "assetProofBatch": {
        "name": "AssetProofBatch",
        "description": "A map of asset proofs, where the key is the asset's public key and the value is the AssetProof struct.",
        "schema": {
          "$ref": "#/components/schemas/AssetProofBatch"
        }
      },
      "GetAssetProof": {
        "name": "GetAssetProof",
        "description": "Payload with public key of asset",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "Public key of asset in base58 encoding."
            }
          },
          "required": [
            "id"
          ]
        }
      },
      "AssetId": {
        "name": "AssetId",
        "description": "Public key of asset in base58 encoding",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "AssetIds": {
        "name": "AssetIds",
        "description": "Public keys of assets.",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Asset public key in base58 encoding"
          }
        }
      },
      "GetAssetProofBatch": {
        "name": "GetAssetProofBatch",
        "description": "Payload with public keys of assets",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
            "ids": {
              "type": "array",
              "description": "Public keys of asset in base58 encoding."
            }
          },
          "required": [
            "ids"
          ]
        }
      }
    },
    "schemas": {
      "after": {
        "name": "after",
        "description": "Cursor based pagination: After Asset ID",
        "schema": {
          "type": "string"
        }
      },
      "before": {
        "name": "before",
        "description": "Cursor based pagination: Before Asset ID",
        "schema": {
          "type": "string"
        }
      },
      "page": {
        "name": "page",
        "description": "Page based pagination (max 50)",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 50
        }
      },
      "limit": {
        "name": "limit",
        "description": "How many items to return at one time (max 1000)",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 1000
        }
      },
      "cursor": {
        "name": "cursor",
        "description": "Cursor data in base58 encoding",
        "schema": {
          "type": "string"
        }
      },
      "options": {
        "name": "options",
        "description": "The display options for the response.",
        "schema": {
          "$ref": "#/components/schemas/Options"
        }
      },
      "display_options": {
        "name": "options",
        "description": "The display options for the response.",
        "schema": {
          "$ref": "#/components/schemas/DisplayOptions"
        }
      },
      "get_by_methods_options": {
        "name": "get_by_methods_options",
        "description": "The display options for the response.",
        "schema": {
          "$ref": "#/components/schemas/GetByMethodsOptions"
        }
      },
      "search_assets_options": {
        "name": "search_assets_options",
        "description": "The display options for the response.",
        "schema": {
          "$ref": "#/components/schemas/SearchAssetsOptions"
        }
      },
      "asset_sort_by": {
        "name": "sort_by",
        "description": "How many items to return at one time (max 1000)",
        "schema": {
          "type": "string",
          "enum": [
            "created",
            "updated",
            "recent_action"
          ]
        }
      },
      "CoreFeesAccountsList": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of core fees accounts.",
            "example": 100
          },
          "limit": {
            "type": "integer",
            "description": "Limit on the number of accounts returned in this response.",
            "example": 10
          },
          "page": {
            "type": "integer",
            "description": "Current page number.",
            "nullable": true,
            "example": 1
          },
          "before": {
            "type": "string",
            "description": "Pagination token to fetch accounts before this token.",
            "nullable": true,
            "example": "abc123"
          },
          "after": {
            "type": "string",
            "description": "Pagination token to fetch accounts after this token.",
            "nullable": true,
            "example": "xyz456"
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for pagination.",
            "nullable": true,
            "example": "cursor789"
          },
          "core_fees_account": {
            "type": "array",
            "description": "List of core fees accounts.",
            "items": {
              "$ref": "#/components/schemas/CoreFeesAccount"
            }
          }
        },
        "required": [
          "total",
          "limit",
          "core_fees_account"
        ]
      },
      "CoreFeesAccount": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address of the core fees account.",
            "example": "address123"
          },
          "current_balance": {
            "type": "integer",
            "description": "Current balance of the core fees account.",
            "example": 50000
          },
          "minimum_rent": {
            "type": "integer",
            "description": "Minimum rent required for the core fees account.",
            "example": 1000
          }
        },
        "required": [
          "address",
          "current_balance",
          "minimum_rent"
        ]
      },
      "AssetProof": {
        "type": "object",
        "properties": {
          "root": {
            "type": "string",
            "description": "The root of the merkle tree."
          },
          "proof": {
            "type": "array",
            "description": "The proof of the asset.",
            "items": {
              "type": "string"
            }
          },
          "node_index": {
            "type": "number"
          },
          "leaf": {
            "type": "string",
            "description": "The leaf of the merkle tree."
          },
          "tree_id": {
            "type": "string",
            "description": "The ID of the merkle tree."
          }
        }
      },
      "AssetProofBatch": {
        "name": "assetProofBatch",
        "type": "object",
        "properties": {
          "additionalProperties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssetProof"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "TokenType": {
        "type": "string",
        "enum": [
          "fungible",
          "nonFungible",
          "regularNFT",
          "compressedNFT",
          "all"
        ]
      },
      "RoyaltyModel": {
        "type": "string",
        "enum": [
          "creators",
          "fanout",
          "single"
        ]
      },
      "OwnershipModel": {
        "type": "string",
        "enum": [
          "single",
          "token"
        ]
      },
      "SearchConditionType": {
        "type": "string",
        "enum": [
          "all",
          "any"
        ]
      },
      "Interface": {
        "type": "string",
        "enum": [
          "V1_NFT",
          "V1_PRINT",
          "LEGACY_NFT",
          "V2_NFT",
          "FungibleAsset",
          "FungibleToken",
          "Custom",
          "Identity",
          "Executable",
          "ProgrammableNFT",
          "MplCoreAsset",
          "MplCoreCollection"
        ]
      },
      "Asset": {
        "type": "object",
        "required": [
          "version",
          "id"
        ],
        "properties": {
          "interface": {
            "$ref": "#/components/schemas/Interface"
          },
          "id": {
            "type": "string"
          },
          "content": {
            "type": "object",
            "required": [
              "$schema"
            ],
            "properties": {
              "$schema": {
                "type": "string",
                "required": [
                  "$$schema"
                ],
                "properties": {
                  "$$schema": {
                    "type": "string"
                  }
                }
              },
              "files": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "uri": {
                      "type": "string"
                    },
                    "mime": {
                      "type": "string"
                    },
                    "quality": {
                      "type": "object",
                      "properties": {
                        "$$schema": {
                          "type": "string"
                        }
                      }
                    },
                    "context": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "wallet-default",
                          "web-desktop",
                          "web-mobile",
                          "app-mobile",
                          "app-desktop",
                          "app",
                          "vr"
                        ]
                      }
                    }
                  },
                  "oneOf": [
                    {
                      "propertyNames": {
                        "enum": [
                          "context",
                          "uri",
                          "mime"
                        ]
                      }
                    },
                    {
                      "propertyNames": {
                        "enum": [
                          "context",
                          "quality"
                        ]
                      }
                    }
                  ]
                }
              },
              "metadata": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "links": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "authorities": {
            "type": "array",
            "items": {
              "type": "object",
              "address": {
                "type": "string"
              },
              "scopes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "compression": {
            "type": "object",
            "properties": {
              "eligible": {
                "type": "boolean"
              },
              "compressed": {
                "type": "boolean"
              }
            }
          },
          "grouping": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "$$schema"
              ],
              "properties": {
                "$$schema": {
                  "type": "string"
                },
                "group_key": {
                  "type": "string"
                },
                "group_value": {
                  "type": "string"
                }
              }
            }
          },
          "royalty": {
            "type": "object",
            "properties": {
              "royalty_model": {
                "type": "string",
                "enum": [
                  "creators",
                  "fanout",
                  "single"
                ]
              },
              "target": {
                "type": "string"
              },
              "percent": {
                "type": "number"
              },
              "locked": {
                "type": "boolean"
              }
            }
          },
          "creators": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "address": {
                  "type": "string"
                },
                "share": {
                  "type": "string"
                },
                "verified": {
                  "type": "boolean"
                }
              }
            }
          },
          "ownership": {
            "type": "object",
            "properties": {
              "frozen": {
                "type": "boolean"
              },
              "delegated": {
                "type": "boolean"
              },
              "delegate": {
                "type": "string"
              },
              "ownership_model": {
                "type": "string",
                "enum": [
                  "Single",
                  "Token"
                ]
              },
              "address": {
                "type": "string"
              }
            }
          }
        }
      },
      "AssetList": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Asset"
        }
      },
      "DisplayOptions": {
        "type": "object",
        "properties": {
          "showZeroBalance": {
            "type": "boolean",
            "description": "Displays assets with zero balance.",
            "default": false
          }
        },
        "required": [
          "showZeroBalance"
        ]
      },
      "Options": {
        "type": "object",
        "properties": {
          "showUnverifiedCollections": {
            "type": "boolean",
            "description": "Displays grouping information for unverified collections instead of skipping them."
          },
          "showCollectionMetadata": {
            "type": "boolean",
            "description": "Displays metadata for the collection."
          },
          "showInscription": {
            "type": "boolean",
            "description": "Displays inscription details of assets inscribed on-chain."
          },
          "showFungible": {
            "type": "boolean",
            "description": "Displays fungible tokens held by the owner."
          }
        },
        "required": [
          "showUnverifiedCollections",
          "showCollectionMetadata",
          "showInscription",
          "showFungible"
        ]
      },
      "SearchAssetsOptions": {
        "type": "object",
        "properties": {
          "showUnverifiedCollections": {
            "type": "boolean",
            "description": "Displays grouping information for unverified collections instead of skipping them."
          },
          "showGrandTotal": {
            "type": "boolean",
            "description": "Shows the total number of assets that matched the query. This will make the request slower."
          },
          "showNativeBalance": {
            "type": "boolean",
            "description": "Shows the native balance (SOL) held by the owner."
          },
          "showCollectionMetadata": {
            "type": "boolean",
            "description": "Displays metadata for the collection."
          },
          "showInscription": {
            "type": "boolean",
            "description": "Displays inscription details of assets inscribed on-chain."
          },
          "showZeroBalance": {
            "type": "boolean",
            "description": "Displays assets with zero balance."
          }
        },
        "required": [
          "showUnverifiedCollections",
          "showGrandTotal",
          "showNativeBalance",
          "showCollectionMetadata",
          "showInscription",
          "showZeroBalance"
        ]
      },
      "GetByMethodsOptions": {
        "type": "object",
        "properties": {
          "showUnverifiedCollections": {
            "type": "boolean",
            "description": "Displays grouping information for unverified collections instead of skipping them."
          },
          "showGrandTotal": {
            "type": "boolean",
            "description": "Shows the total number of assets that matched the query. This will make the request slower."
          },
          "showNativeBalance": {
            "type": "boolean",
            "description": "Shows the native balance (SOL) held by the owner."
          },
          "showCollectionMetadata": {
            "type": "boolean",
            "description": "Displays metadata for the collection."
          },
          "showInscription": {
            "type": "boolean",
            "description": "Displays inscription details of assets inscribed on-chain."
          },
          "showZeroBalance": {
            "type": "boolean",
            "description": "Displays assets with zero balance."
          },
          "showFungible": {
            "type": "boolean",
            "description": "Displays fungible tokens held by the owner."
          }
        },
        "required": [
          "showUnverifiedCollections",
          "showGrandTotal",
          "showNativeBalance",
          "showCollectionMetadata",
          "showInscription",
          "showZeroBalance",
          "showFungible"
        ]
      },
      "TokenAccountsList": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of token accounts"
          },
          "limit": {
            "type": "integer",
            "description": "Limit on the number of accounts returned"
          },
          "page": {
            "type": "integer",
            "description": "Page number"
          },
          "before": {
            "type": "string",
            "description": "Cursor based pagination"
          },
          "after": {
            "type": "string",
            "description": "Cursor based pagination"
          },
          "cursor": {
            "type": "string",
            "description": "Cursor for page navigation"
          },
          "tokenAccounts": {
            "type": "array",
            "description": "List of token accounts",
            "items": {
              "$ref": "#/components/schemas/ResponseTokenAccount"
            }
          }
        },
        "required": [
          "total",
          "limit",
          "tokenAccounts"
        ]
      },
      "TransactionSignatureList": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "Total number of transaction signatures.",
            "example": 1000
          },
          "limit": {
            "type": "integer",
            "description": "The limit on the number of signatures returned.",
            "example": 100
          },
          "page": {
            "type": "integer",
            "description": "The current page number for paginated results.",
            "nullable": true,
            "example": 1
          },
          "before": {
            "type": "string",
            "description": "Get signatures before this sequence number.",
            "nullable": true,
            "example": "seq123"
          },
          "after": {
            "type": "string",
            "description": "Get signatures after this sequence number.",
            "nullable": true,
            "example": "seq456"
          },
          "items": {
            "type": "array",
            "description": "The list of signature items.",
            "items": {
              "$ref": "#/components/schemas/SignatureItem"
            }
          }
        },
        "required": [
          "total",
          "limit",
          "items"
        ]
      },
      "SignatureItem": {
        "type": "object",
        "properties": {
          "signature": {
            "type": "string",
            "description": "The transaction signature.",
            "example": "signature123"
          },
          "instruction": {
            "type": "string",
            "description": "The instruction associated with the signature.",
            "example": "instructionX"
          },
          "slot": {
            "type": "integer",
            "description": "The slot number of the signature.",
            "example": 987654
          }
        },
        "required": [
          "signature",
          "instruction",
          "slot"
        ]
      },
      "ResponseTokenAccount": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Token account address"
          },
          "mint": {
            "type": "string",
            "description": "Token mint address"
          },
          "owner": {
            "type": "string",
            "description": "Token owner address"
          },
          "amount": {
            "type": "integer",
            "description": "Number of tokens on the account"
          },
          "delegatedAmount": {
            "type": "integer",
            "description": "Number of delegated tokens"
          },
          "frozen": {
            "type": "boolean",
            "description": "Account frozen status"
          },
          "tokenExtensions": {
            "type": "object",
            "description": "Additional information about the token",
            "nullable": true
          }
        },
        "required": [
          "address",
          "mint",
          "owner",
          "amount",
          "delegatedAmount",
          "frozen"
        ]
      }
    }
  }
}
